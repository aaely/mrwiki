"""Super Playmate, Pit Watch, CashClub, LMS"""
type Application {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  vendors: Vendors
  icon: UploadFile
  departments: Departments
  properties(sort: String, limit: Int, start: Int, where: JSON): [Properties]
  test(sort: String, limit: Int, start: Int, where: JSON): [Departments]
}

type ApplicationAggregator {
  count: Int
}

type ApplicationConnection {
  values: [Application]
  groupBy: ApplicationGroupBy
  aggregate: ApplicationAggregator
}

type ApplicationConnection_id {
  key: ID
  connection: ApplicationConnection
}

type ApplicationConnectionCreatedAt {
  key: DateTime
  connection: ApplicationConnection
}

type ApplicationConnectionDepartments {
  key: ID
  connection: ApplicationConnection
}

type ApplicationConnectionIcon {
  key: ID
  connection: ApplicationConnection
}

type ApplicationConnectionName {
  key: String
  connection: ApplicationConnection
}

type ApplicationConnectionUpdatedAt {
  key: DateTime
  connection: ApplicationConnection
}

type ApplicationConnectionVendors {
  key: ID
  connection: ApplicationConnection
}

type ApplicationGroupBy {
  _id: [ApplicationConnection_id]
  createdAt: [ApplicationConnectionCreatedAt]
  updatedAt: [ApplicationConnectionUpdatedAt]
  name: [ApplicationConnectionName]
  vendors: [ApplicationConnectionVendors]
  icon: [ApplicationConnectionIcon]
  departments: [ApplicationConnectionDepartments]
}

input ApplicationInput {
  name: String!
  vendors: ID
  icon: ID
  properties: [ID]
  departments: ID
  test: [ID]
}

input createApplicationInput {
  data: ApplicationInput
}

type createApplicationPayload {
  application: Application
}

input createDepartmentsInput {
  data: DepartmentsInput
}

type createDepartmentsPayload {
  department: Departments
}

input createEmployeesInput {
  data: EmployeesInput
}

type createEmployeesPayload {
  employee: Employees
}

input createJobtitleInput {
  data: JobtitleInput
}

type createJobtitlePayload {
  jobtitle: Jobtitle
}

input createPropertiesInput {
  data: PropertiesInput
}

type createPropertiesPayload {
  property: Properties
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createVendorsInput {
  data: VendorsInput
}

type createVendorsPayload {
  vendor: Vendors
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteApplicationInput {
  where: InputID
}

type deleteApplicationPayload {
  application: Application
}

input deleteDepartmentsInput {
  where: InputID
}

type deleteDepartmentsPayload {
  department: Departments
}

input deleteEmployeesInput {
  where: InputID
}

type deleteEmployeesPayload {
  employee: Employees
}

input deleteJobtitleInput {
  where: InputID
}

type deleteJobtitlePayload {
  jobtitle: Jobtitle
}

input deletePropertiesInput {
  where: InputID
}

type deletePropertiesPayload {
  property: Properties
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVendorsInput {
  where: InputID
}

type deleteVendorsPayload {
  vendor: Vendors
}

type Departments {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  managers(sort: String, limit: Int, start: Int, where: JSON): [Application]
  directors(sort: String, limit: Int, start: Int, where: JSON): [Application]
}

type DepartmentsAggregator {
  count: Int
}

type DepartmentsConnection {
  values: [Departments]
  groupBy: DepartmentsGroupBy
  aggregate: DepartmentsAggregator
}

type DepartmentsConnection_id {
  key: ID
  connection: DepartmentsConnection
}

type DepartmentsConnectionCreatedAt {
  key: DateTime
  connection: DepartmentsConnection
}

type DepartmentsConnectionName {
  key: String
  connection: DepartmentsConnection
}

type DepartmentsConnectionUpdatedAt {
  key: DateTime
  connection: DepartmentsConnection
}

type DepartmentsGroupBy {
  _id: [DepartmentsConnection_id]
  createdAt: [DepartmentsConnectionCreatedAt]
  updatedAt: [DepartmentsConnectionUpdatedAt]
  name: [DepartmentsConnectionName]
}

input DepartmentsInput {
  name: String
  managers: [ID]
  directors: [ID]
}

input editApplicationInput {
  name: String
  vendors: ID
  icon: ID
  properties: [ID]
  departments: ID
  test: [ID]
}

input editDepartmentsInput {
  name: String
  managers: [ID]
  directors: [ID]
}

input editEmployeesInput {
  fname: String
  lname: String
  extension: String
  pnumber: String
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editJobtitleInput {
  title: String
}

input editPropertiesInput {
  name: String
  applications: [ID]
  image: ID
  phone: String
  director: String
  manager: String
  playertracking: String
  helpdesk: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input editVendorsInput {
  name: String
  applications: [ID]
  phone: String
  email: String
}

type Employees {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  fname: String
  lname: String
  extension: String
  pnumber: String
}

type EmployeesAggregator {
  count: Int
}

type EmployeesConnection {
  values: [Employees]
  groupBy: EmployeesGroupBy
  aggregate: EmployeesAggregator
}

type EmployeesConnection_id {
  key: ID
  connection: EmployeesConnection
}

type EmployeesConnectionCreatedAt {
  key: DateTime
  connection: EmployeesConnection
}

type EmployeesConnectionExtension {
  key: String
  connection: EmployeesConnection
}

type EmployeesConnectionFname {
  key: String
  connection: EmployeesConnection
}

type EmployeesConnectionLname {
  key: String
  connection: EmployeesConnection
}

type EmployeesConnectionPnumber {
  key: String
  connection: EmployeesConnection
}

type EmployeesConnectionUpdatedAt {
  key: DateTime
  connection: EmployeesConnection
}

type EmployeesGroupBy {
  _id: [EmployeesConnection_id]
  createdAt: [EmployeesConnectionCreatedAt]
  updatedAt: [EmployeesConnectionUpdatedAt]
  fname: [EmployeesConnectionFname]
  lname: [EmployeesConnectionLname]
  extension: [EmployeesConnectionExtension]
  pnumber: [EmployeesConnectionPnumber]
}

input EmployeesInput {
  fname: String
  lname: String
  extension: String
  pnumber: String
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

type Jobtitle {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
}

type JobtitleAggregator {
  count: Int
}

type JobtitleConnection {
  values: [Jobtitle]
  groupBy: JobtitleGroupBy
  aggregate: JobtitleAggregator
}

type JobtitleConnection_id {
  key: ID
  connection: JobtitleConnection
}

type JobtitleConnectionCreatedAt {
  key: DateTime
  connection: JobtitleConnection
}

type JobtitleConnectionTitle {
  key: String
  connection: JobtitleConnection
}

type JobtitleConnectionUpdatedAt {
  key: DateTime
  connection: JobtitleConnection
}

type JobtitleGroupBy {
  _id: [JobtitleConnection_id]
  createdAt: [JobtitleConnectionCreatedAt]
  updatedAt: [JobtitleConnectionUpdatedAt]
  title: [JobtitleConnectionTitle]
}

input JobtitleInput {
  title: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Application | createApplicationPayload | updateApplicationPayload | deleteApplicationPayload | ApplicationConnection | ApplicationAggregator | ApplicationGroupBy | ApplicationConnection_id | ApplicationConnectionCreatedAt | ApplicationConnectionUpdatedAt | ApplicationConnectionName | ApplicationConnectionVendors | ApplicationConnectionIcon | ApplicationConnectionDepartments | Departments | createDepartmentsPayload | updateDepartmentsPayload | deleteDepartmentsPayload | DepartmentsConnection | DepartmentsAggregator | DepartmentsGroupBy | DepartmentsConnection_id | DepartmentsConnectionCreatedAt | DepartmentsConnectionUpdatedAt | DepartmentsConnectionName | Employees | createEmployeesPayload | updateEmployeesPayload | deleteEmployeesPayload | EmployeesConnection | EmployeesAggregator | EmployeesGroupBy | EmployeesConnection_id | EmployeesConnectionCreatedAt | EmployeesConnectionUpdatedAt | EmployeesConnectionFname | EmployeesConnectionLname | EmployeesConnectionExtension | EmployeesConnectionPnumber | Jobtitle | createJobtitlePayload | updateJobtitlePayload | deleteJobtitlePayload | JobtitleConnection | JobtitleAggregator | JobtitleGroupBy | JobtitleConnection_id | JobtitleConnectionCreatedAt | JobtitleConnectionUpdatedAt | JobtitleConnectionTitle | Properties | createPropertiesPayload | updatePropertiesPayload | deletePropertiesPayload | PropertiesConnection | PropertiesAggregator | PropertiesGroupBy | PropertiesConnection_id | PropertiesConnectionCreatedAt | PropertiesConnectionUpdatedAt | PropertiesConnectionName | PropertiesConnectionImage | PropertiesConnectionPhone | PropertiesConnectionDirector | PropertiesConnectionManager | PropertiesConnectionPlayertracking | PropertiesConnectionHelpdesk | Vendors | createVendorsPayload | updateVendorsPayload | deleteVendorsPayload | VendorsConnection | VendorsAggregator | VendorsGroupBy | VendorsConnection_id | VendorsConnectionCreatedAt | VendorsConnectionUpdatedAt | VendorsConnectionName | VendorsConnectionPhone | VendorsConnectionEmail | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createApplication(input: createApplicationInput): createApplicationPayload
  updateApplication(input: updateApplicationInput): updateApplicationPayload
  deleteApplication(input: deleteApplicationInput): deleteApplicationPayload
  createDepartments(input: createDepartmentsInput): createDepartmentsPayload
  updateDepartments(input: updateDepartmentsInput): updateDepartmentsPayload
  deleteDepartments(input: deleteDepartmentsInput): deleteDepartmentsPayload
  createEmployees(input: createEmployeesInput): createEmployeesPayload
  updateEmployees(input: updateEmployeesInput): updateEmployeesPayload
  deleteEmployees(input: deleteEmployeesInput): deleteEmployeesPayload
  createJobtitle(input: createJobtitleInput): createJobtitlePayload
  updateJobtitle(input: updateJobtitleInput): updateJobtitlePayload
  deleteJobtitle(input: deleteJobtitleInput): deleteJobtitlePayload
  createProperties(input: createPropertiesInput): createPropertiesPayload
  updateProperties(input: updatePropertiesInput): updatePropertiesPayload
  deleteProperties(input: deletePropertiesInput): deletePropertiesPayload
  createVendors(input: createVendorsInput): createVendorsPayload
  updateVendors(input: updateVendorsInput): updateVendorsPayload
  deleteVendors(input: deleteVendorsInput): deleteVendorsPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Properties {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  image: UploadFile
  phone: String
  director: String
  manager: String
  playertracking: String
  helpdesk: String
  applications(sort: String, limit: Int, start: Int, where: JSON): [Application]
}

type PropertiesAggregator {
  count: Int
}

type PropertiesConnection {
  values: [Properties]
  groupBy: PropertiesGroupBy
  aggregate: PropertiesAggregator
}

type PropertiesConnection_id {
  key: ID
  connection: PropertiesConnection
}

type PropertiesConnectionCreatedAt {
  key: DateTime
  connection: PropertiesConnection
}

type PropertiesConnectionDirector {
  key: String
  connection: PropertiesConnection
}

type PropertiesConnectionHelpdesk {
  key: String
  connection: PropertiesConnection
}

type PropertiesConnectionImage {
  key: ID
  connection: PropertiesConnection
}

type PropertiesConnectionManager {
  key: String
  connection: PropertiesConnection
}

type PropertiesConnectionName {
  key: String
  connection: PropertiesConnection
}

type PropertiesConnectionPhone {
  key: String
  connection: PropertiesConnection
}

type PropertiesConnectionPlayertracking {
  key: String
  connection: PropertiesConnection
}

type PropertiesConnectionUpdatedAt {
  key: DateTime
  connection: PropertiesConnection
}

type PropertiesGroupBy {
  _id: [PropertiesConnection_id]
  createdAt: [PropertiesConnectionCreatedAt]
  updatedAt: [PropertiesConnectionUpdatedAt]
  name: [PropertiesConnectionName]
  image: [PropertiesConnectionImage]
  phone: [PropertiesConnectionPhone]
  director: [PropertiesConnectionDirector]
  manager: [PropertiesConnectionManager]
  playertracking: [PropertiesConnectionPlayertracking]
  helpdesk: [PropertiesConnectionHelpdesk]
}

input PropertiesInput {
  name: String
  applications: [ID]
  image: ID
  phone: String
  director: String
  manager: String
  playertracking: String
  helpdesk: String
}

type Query {
  application(id: ID!): Application
  applications(sort: String, limit: Int, start: Int, where: JSON): [Application]
  applicationsConnection(sort: String, limit: Int, start: Int, where: JSON): ApplicationConnection
  department(id: ID!): Departments
  departments(sort: String, limit: Int, start: Int, where: JSON): [Departments]
  departmentsConnection(sort: String, limit: Int, start: Int, where: JSON): DepartmentsConnection
  employee(id: ID!): Employees
  employees(sort: String, limit: Int, start: Int, where: JSON): [Employees]
  employeesConnection(sort: String, limit: Int, start: Int, where: JSON): EmployeesConnection
  jobtitle(id: ID!): Jobtitle
  jobtitles(sort: String, limit: Int, start: Int, where: JSON): [Jobtitle]
  jobtitlesConnection(sort: String, limit: Int, start: Int, where: JSON): JobtitleConnection
  property(id: ID!): Properties
  properties(sort: String, limit: Int, start: Int, where: JSON): [Properties]
  propertiesConnection(sort: String, limit: Int, start: Int, where: JSON): PropertiesConnection
  vendor(id: ID!): Vendors
  vendors(sort: String, limit: Int, start: Int, where: JSON): [Vendors]
  vendorsConnection(sort: String, limit: Int, start: Int, where: JSON): VendorsConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateApplicationInput {
  where: InputID
  data: editApplicationInput
}

type updateApplicationPayload {
  application: Application
}

input updateDepartmentsInput {
  where: InputID
  data: editDepartmentsInput
}

type updateDepartmentsPayload {
  department: Departments
}

input updateEmployeesInput {
  where: InputID
  data: editEmployeesInput
}

type updateEmployeesPayload {
  employee: Employees
}

input updateJobtitleInput {
  where: InputID
  data: editJobtitleInput
}

type updateJobtitlePayload {
  jobtitle: Jobtitle
}

input updatePropertiesInput {
  where: InputID
  data: editPropertiesInput
}

type updatePropertiesPayload {
  property: Properties
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVendorsInput {
  where: InputID
  data: editVendorsInput
}

type updateVendorsPayload {
  vendor: Vendors
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

"""Ex: MGT, ATI, Agyilysys"""
type Vendors {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  phone: String
  email: String
  applications(sort: String, limit: Int, start: Int, where: JSON): [Application]
}

type VendorsAggregator {
  count: Int
}

type VendorsConnection {
  values: [Vendors]
  groupBy: VendorsGroupBy
  aggregate: VendorsAggregator
}

type VendorsConnection_id {
  key: ID
  connection: VendorsConnection
}

type VendorsConnectionCreatedAt {
  key: DateTime
  connection: VendorsConnection
}

type VendorsConnectionEmail {
  key: String
  connection: VendorsConnection
}

type VendorsConnectionName {
  key: String
  connection: VendorsConnection
}

type VendorsConnectionPhone {
  key: String
  connection: VendorsConnection
}

type VendorsConnectionUpdatedAt {
  key: DateTime
  connection: VendorsConnection
}

type VendorsGroupBy {
  _id: [VendorsConnection_id]
  createdAt: [VendorsConnectionCreatedAt]
  updatedAt: [VendorsConnectionUpdatedAt]
  name: [VendorsConnectionName]
  phone: [VendorsConnectionPhone]
  email: [VendorsConnectionEmail]
}

input VendorsInput {
  name: String
  applications: [ID]
  phone: String
  email: String
}
