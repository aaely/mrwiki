"""Super Playmate, Pit Watch, CashClub, LMS"""
type Application {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  vendors: Vendors
  icon: UploadFile
  properties(sort: String, limit: Int, start: Int, where: JSON): [Properties]
}

type ApplicationAggregator {
  count: Int
}

type ApplicationConnection {
  values: [Application]
  groupBy: ApplicationGroupBy
  aggregate: ApplicationAggregator
}

type ApplicationConnection_id {
  key: ID
  connection: ApplicationConnection
}

type ApplicationConnectionCreatedAt {
  key: DateTime
  connection: ApplicationConnection
}

type ApplicationConnectionIcon {
  key: ID
  connection: ApplicationConnection
}

type ApplicationConnectionName {
  key: String
  connection: ApplicationConnection
}

type ApplicationConnectionUpdatedAt {
  key: DateTime
  connection: ApplicationConnection
}

type ApplicationConnectionVendors {
  key: ID
  connection: ApplicationConnection
}

type ApplicationGroupBy {
  _id: [ApplicationConnection_id]
  createdAt: [ApplicationConnectionCreatedAt]
  updatedAt: [ApplicationConnectionUpdatedAt]
  name: [ApplicationConnectionName]
  vendors: [ApplicationConnectionVendors]
  icon: [ApplicationConnectionIcon]
}

input ApplicationInput {
  name: String!
  vendors: ID
  icon: ID
  properties: [ID]
}

input createApplicationInput {
  data: ApplicationInput
}

type createApplicationPayload {
  application: Application
}

input createPropertiesInput {
  data: PropertiesInput
}

type createPropertiesPayload {
  property: Properties
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createVendorsInput {
  data: VendorsInput
}

type createVendorsPayload {
  vendor: Vendors
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteApplicationInput {
  where: InputID
}

type deleteApplicationPayload {
  application: Application
}

input deletePropertiesInput {
  where: InputID
}

type deletePropertiesPayload {
  property: Properties
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVendorsInput {
  where: InputID
}

type deleteVendorsPayload {
  vendor: Vendors
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Application | createApplicationPayload | updateApplicationPayload | deleteApplicationPayload | ApplicationConnection | ApplicationAggregator | ApplicationGroupBy | ApplicationConnection_id | ApplicationConnectionCreatedAt | ApplicationConnectionUpdatedAt | ApplicationConnectionName | ApplicationConnectionVendors | ApplicationConnectionIcon | Properties | createPropertiesPayload | updatePropertiesPayload | deletePropertiesPayload | PropertiesConnection | PropertiesAggregator | PropertiesGroupBy | PropertiesConnection_id | PropertiesConnectionCreatedAt | PropertiesConnectionUpdatedAt | PropertiesConnectionName | Vendors | createVendorsPayload | updateVendorsPayload | deleteVendorsPayload | VendorsConnection | VendorsAggregator | VendorsGroupBy | VendorsConnection_id | VendorsConnectionCreatedAt | VendorsConnectionUpdatedAt | VendorsConnectionName | VendorsConnectionPhone | VendorsConnectionEmail | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createApplication(input: createApplicationInput): createApplicationPayload
  updateApplication(input: updateApplicationInput): updateApplicationPayload
  deleteApplication(input: deleteApplicationInput): deleteApplicationPayload
  createProperties(input: createPropertiesInput): createPropertiesPayload
  updateProperties(input: updatePropertiesInput): updatePropertiesPayload
  deleteProperties(input: deletePropertiesInput): deletePropertiesPayload
  createVendors(input: createVendorsInput): createVendorsPayload
  updateVendors(input: updateVendorsInput): updateVendorsPayload
  deleteVendors(input: deleteVendorsInput): deleteVendorsPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Properties {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  applications(sort: String, limit: Int, start: Int, where: JSON): [Application]
}

type PropertiesAggregator {
  count: Int
}

type PropertiesConnection {
  values: [Properties]
  groupBy: PropertiesGroupBy
  aggregate: PropertiesAggregator
}

type PropertiesConnection_id {
  key: ID
  connection: PropertiesConnection
}

type PropertiesConnectionCreatedAt {
  key: DateTime
  connection: PropertiesConnection
}

type PropertiesConnectionName {
  key: String
  connection: PropertiesConnection
}

type PropertiesConnectionUpdatedAt {
  key: DateTime
  connection: PropertiesConnection
}

type PropertiesGroupBy {
  _id: [PropertiesConnection_id]
  createdAt: [PropertiesConnectionCreatedAt]
  updatedAt: [PropertiesConnectionUpdatedAt]
  name: [PropertiesConnectionName]
}

input PropertiesInput {
  name: String
  applications: [ID]
}

type Query {
  application(id: ID!): Application
  applications(sort: String, limit: Int, start: Int, where: JSON): [Application]
  applicationsConnection(sort: String, limit: Int, start: Int, where: JSON): ApplicationConnection
  property(id: ID!): Properties
  properties(sort: String, limit: Int, start: Int, where: JSON): [Properties]
  propertiesConnection(sort: String, limit: Int, start: Int, where: JSON): PropertiesConnection
  vendor(id: ID!): Vendors
  vendors(sort: String, limit: Int, start: Int, where: JSON): [Vendors]
  vendorsConnection(sort: String, limit: Int, start: Int, where: JSON): VendorsConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateApplicationInput {
  where: InputID
  data: ApplicationInput
}

type updateApplicationPayload {
  application: Application
}

input updatePropertiesInput {
  where: InputID
  data: PropertiesInput
}

type updatePropertiesPayload {
  property: Properties
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVendorsInput {
  where: InputID
  data: VendorsInput
}

type updateVendorsPayload {
  vendor: Vendors
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

input UserInput {
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

"""Ex: MGT, ATI, Agyilysys"""
type Vendors {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  phone: String
  email: String
  applications(sort: String, limit: Int, start: Int, where: JSON): [Application]
}

type VendorsAggregator {
  count: Int
}

type VendorsConnection {
  values: [Vendors]
  groupBy: VendorsGroupBy
  aggregate: VendorsAggregator
}

type VendorsConnection_id {
  key: ID
  connection: VendorsConnection
}

type VendorsConnectionCreatedAt {
  key: DateTime
  connection: VendorsConnection
}

type VendorsConnectionEmail {
  key: String
  connection: VendorsConnection
}

type VendorsConnectionName {
  key: String
  connection: VendorsConnection
}

type VendorsConnectionPhone {
  key: String
  connection: VendorsConnection
}

type VendorsConnectionUpdatedAt {
  key: DateTime
  connection: VendorsConnection
}

type VendorsGroupBy {
  _id: [VendorsConnection_id]
  createdAt: [VendorsConnectionCreatedAt]
  updatedAt: [VendorsConnectionUpdatedAt]
  name: [VendorsConnectionName]
  phone: [VendorsConnectionPhone]
  email: [VendorsConnectionEmail]
}

input VendorsInput {
  name: String
  applications: [ID]
  phone: String
  email: String
}
